<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dylan-Big Data Technology Blogs</title>
    <link>https://BigdataGit.github.io/</link>
    <description>Recent content on Dylan-Big Data Technology Blogs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Dylan&amp;Sunny</copyright>
    <lastBuildDate>Mon, 28 Jan 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://BigdataGit.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HistoryServer HA</title>
      <link>https://BigdataGit.github.io/post/historyserver-ha/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://BigdataGit.github.io/post/historyserver-ha/</guid>
      
        <description>

&lt;h2 id=&#34;historyserver-ha&#34;&gt;HistoryServer HA&lt;/h2&gt;

&lt;p&gt;HA配置方案:通过Nginx反向代理HistoryServer实现HistoryServer高可用.&lt;/p&gt;

&lt;h3 id=&#34;1-1-historyserver配置&#34;&gt;1.1     HistoryServer配置&lt;/h3&gt;

&lt;p&gt;1、在yarn-site.xml中添加以下配置:q!&lt;/p&gt;

&lt;blockquote&gt;
&lt;!--开启聚合日志--&gt;

&lt;p&gt;&lt;property&gt;
&lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;
&lt;value&gt;true&lt;/value&gt;
&lt;/property&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&amp;lt;!—指定查询日志URL&amp;gt;
&amp;gt;&lt;property&gt;
&lt;name&gt; yarn.log.server.url &lt;/name&gt;
&lt;value&gt; &lt;a href=&#34;http://ip:port/jobhistory/logs/&#34;&gt;http://ip:port/jobhistory/logs/&lt;/a&gt;&lt;/value&gt;
&lt;/property&gt;&lt;/p&gt;

&lt;h5 id=&#34;注意-此处ip和端口指定为nginx代理的域名和端口&#34;&gt;注意:此处ip和端口指定为Nginx代理的域名和端口.&lt;/h5&gt;

&lt;p&gt;2、在mapred-site.xml 中添加&lt;/p&gt;

&lt;!-- 设置jobhistoryserver 没有配置的话 history入口不可用 --&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;property&gt;
&lt;name&gt;mapreduce.jobhistory.address&lt;/name&gt;
&lt;value&gt;IP:10020&lt;/value&gt;
&lt;/property&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- 配置web端口 --&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;property&gt;
&lt;name&gt;mapreduce.jobhistory.webapp.address&lt;/name&gt;
&lt;value&gt;IP:19888&lt;/value&gt;
&lt;/property&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- 配置正在运行中的日志在hdfs上的存放路径 --&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;property&gt;
&lt;name&gt;mapreduce.jobhistory.intermediate-done-dir&lt;/name&gt;
&lt;value&gt;/history/done_intermediate&lt;/value&gt;
&lt;/property&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- 配置运行过的日志存放在hdfs上的存放路径 --&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;property&gt;
&lt;name&gt;mapreduce.jobhistory.done-dir&lt;/name&gt;
&lt;value&gt;/history/done&lt;/value&gt;
&lt;/property&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3、启动/停止historyserver&lt;/p&gt;

&lt;p&gt;启动： 在hadoop/sbin/目录下执行
&lt;code&gt;./mr-jobhistory-daemon.sh start historyserver&lt;/code&gt;
停止：在hadoop/sbin/目录下执行
&lt;code&gt;./mr-jobhistory-daemon.sh stop historyserver&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1-2-nginx代理配置&#34;&gt;1.2     Nginx代理配置&lt;/h3&gt;

&lt;p&gt;下载安装Nginx,此过程省略.&lt;/p&gt;

&lt;p&gt;1、配置Nginx反向代理HistoryServer,
nginx.conf:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http {
	··············
upstream mysvr {
#此处配置history的web ui代理
        server ip1:19890 weight=5;
        server ip2:19890 weight=5;
  }
 server {
        listen       80;
		#配置nginx代理域名
        server_name  xxxxxx;
        ·············
		#加载上面http代理的配置
        location / {
            root   html;
            index  index.html index.htm;
            proxy_pass  http://mysvr;
        }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2、配置完成后,重启nginx,指定加载配置文件.
##启动、关闭
&lt;code&gt;./sbin/nginx        #默认配置文件 conf/nginx.conf，-c 指定&lt;/code&gt;
&lt;code&gt;./sbin/nginx -s stop
或 pkill nginx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;##重启，不会改变启动时指定的配置文件
&lt;code&gt;./sbin/nginx -s reload&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;1-2-historyserver记录同步&#34;&gt;1.2     HistoryServer记录同步&lt;/h3&gt;

&lt;p&gt;上面的服务配置完,成功启动.
    这时会发现当提交任务执行完成结束之后,只有一个historyserver能够查看到之前提交,执行完成的历史记录。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;原因如下：&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    当提交的任务执行结束之后，hadoop 会通过nginx找到一个historyserver来执行一系列动作（主要是把任务日志在hdfs做个迁移，从mapreduce.jobhistory.intermediate-done-dir 移动到mapreduce.jobhistory.done-dir中）。在移动之前会把相关任务的一些源信息加载到缓存cache中。而这个动作只有被nginx调用的指定historyserver才会做。

    当在web ui展示job history时，会首先加载缓存cache中的job元信息，来读取job的历史记录详情。所有其他未被调用的historyserver节点cache中就没有其他节点执行job日志移动的任务信息。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;{{ % img src=&amp;ldquo;/media/ha.jpg&amp;rdquo; alt=&amp;ldquo;ha&amp;rdquo; %}}&lt;/p&gt;

&lt;p&gt;1、当history执行任务日志迁移完成后，把当前的job id和 clusterTimeStamp信息上传zookeeper，创建一个包含执行上传的HistoryServer主机host命名子节点。&lt;/p&gt;

&lt;p&gt;2、HistoryServer定时执行扫描HDFS日子目录，开始扫描前首先拉取zookeeper中其他HistoryServer创建的节点信息：如上图：包含两个HistoryServer节点H1和H2，H1上传任务信息创建子节点znode1，H2只拉取znode1的节点信息，H2创建子节点znode2，H1拉取znode2的节点信息。信息拉取完毕后删除相应子节点。&lt;/p&gt;

&lt;p&gt;3、HistoryServer拿到znode信息中的job id和clusterTimeStamp后，通过一系列操作拼接成jobId，然后根据JobId从HDFS获取历史job日志信息最后加载到Historyserver cache中。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;执行&lt;/strong&gt;：
1、首先在Zookeeper中创建/history节点。
2、更改逻辑后编译hadoop-mapreduce-project模块，打包。mvn clean package -DskipTests使用target中生成的：hadoop-mapreduce-client-hs-2.7.3.jar替换集群中所有的historyserver所在节点路径 /app/hadoop-2.7.3/share/hadoop/mapreduce下的同名依赖。然后重启historyserver即可&lt;/p&gt;

&lt;p&gt;代码后续上传&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>深入理解线程通信</title>
      <link>https://BigdataGit.github.io/post/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Mon, 28 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://BigdataGit.github.io/post/%E7%BA%BF%E7%A8%8B%E9%80%9A%E4%BF%A1/</guid>
      
        <description>

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;p&gt;开发中不免会遇到需要所有子线程执行完毕通知主线程处理某些逻辑的场景。&lt;/p&gt;

&lt;p&gt;或者是线程 A 在执行到某个条件通知线程 B 执行某个操作。&lt;/p&gt;

&lt;p&gt;可以通过以下几种方式实现：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;1、wait notify
2、join
3、volatile
4、CountDownLatch
5、CyclicBarrier
6、线程响应中断/interrupt
7、线程池/awaitTermination
8、管道通信/write/read&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;等待通知机制&#34;&gt;等待通知机制&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;等待通知模式是 Java 中比较经典的线程通信方式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;两个线程通过对同一对象调用等待 wait() 和通知 notify() 方法来进行通讯。&lt;/p&gt;

&lt;p&gt;如两个线程交替打印奇偶数：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class TwoThreadWaitNotify {

    private int start = 1;

    private boolean flag = false;

    public static void main(String[] args) {
        TwoThreadWaitNotify twoThread = new TwoThreadWaitNotify();
        Thread t1 = new Thread(new OuNum(twoThread));
        t1.setName(&amp;quot;A&amp;quot;);
        Thread t2 = new Thread(new JiNum(twoThread));
        t2.setName(&amp;quot;B&amp;quot;);
        t1.start();
        t2.start();
    }

    /**
     * 偶数线程
     */
    public static class OuNum implements Runnable {
        private TwoThreadWaitNotify number;

        public OuNum(TwoThreadWaitNotify number) {
            this.number = number;
        }

        @Override
        public void run() {

            while (number.start &amp;lt;= 100) {
                synchronized (TwoThreadWaitNotify.class) {
                    System.out.println(&amp;quot;偶数线程抢到锁了&amp;quot;);
                    if (number.flag) {
                        System.out.println(Thread.currentThread().getName() + &amp;quot;+-+偶数&amp;quot; + number.start);
                        number.start++;

                        number.flag = false;
                        TwoThreadWaitNotify.class.notify();

                    }else {
                        try {
                            TwoThreadWaitNotify.class.wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }

            }
        }
    }


    /**
     * 奇数线程
     */
    public static class JiNum implements Runnable {
        private TwoThreadWaitNotify number;

        public JiNum(TwoThreadWaitNotify number) {
            this.number = number;
        }

        @Override
        public void run() {
            while (number.start &amp;lt;= 100) {
                synchronized (TwoThreadWaitNotify.class) {
                    System.out.println(&amp;quot;奇数线程抢到锁了&amp;quot;);
                    if (!number.flag) {
                        System.out.println(Thread.currentThread().getName() + &amp;quot;+-+奇数&amp;quot; + number.start);
                        number.start++;

                        number.flag = true;

                        TwoThreadWaitNotify.class.notify();
                    }else {
                        try {
                            TwoThreadWaitNotify.class.wait();
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }
                    }
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;t2+-+奇数93
t1+-+偶数94
t2+-+奇数95
t1+-+偶数96
t2+-+奇数97
t1+-+偶数98
t2+-+奇数99
t1+-+偶数100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的线程 A 和线程 B 都对同一个对象 &lt;code&gt;TwoThreadWaitNotify.class&lt;/code&gt; 获取锁，A 线程调用了同步对象的 wait() 方法释放了锁并进入 &lt;code&gt;WAITING&lt;/code&gt; 状态。&lt;/p&gt;

&lt;p&gt;B 线程调用了 notify() 方法，这样 A 线程收到通知之后就可以从 wait() 方法中返回。&lt;/p&gt;

&lt;p&gt;这里利用了 &lt;code&gt;TwoThreadWaitNotify.class&lt;/code&gt; 对象完成了通信。&lt;/p&gt;

&lt;p&gt;有一些需要注意:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;wait() 、notify()、notifyAll() 调用的前提都是获得了对象的锁(也可称为对象监视器)。&lt;/li&gt;
&lt;li&gt;调用 wait() 方法后线程会释放锁，进入 &lt;code&gt;WAITING&lt;/code&gt; 状态，该线程也会被移动到&lt;strong&gt;等待队列&lt;/strong&gt;中。&lt;/li&gt;
&lt;li&gt;调用 notify() 方法会将&lt;strong&gt;等待队列&lt;/strong&gt;中的线程移动到&lt;strong&gt;同步队列&lt;/strong&gt;中，线程状态也会更新为 &lt;code&gt;BLOCKED&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从 wait() 方法返回的前提是调用 notify() 方法的线程释放锁，wait() 方法的线程获得锁。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;等待通知有着一个经典范式：&lt;/p&gt;

&lt;p&gt;线程 A 作为消费者：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取对象的锁。&lt;/li&gt;
&lt;li&gt;进入 while(判断条件)，并调用 wait() 方法。&lt;/li&gt;
&lt;li&gt;当条件满足跳出循环执行具体处理逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;线程 B 作为生产者:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;获取对象锁。&lt;/li&gt;
&lt;li&gt;更改与线程 A 共用的判断条件。&lt;/li&gt;
&lt;li&gt;调用 notify() 方法。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;伪代码如下:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//Thread A

synchronized(Object){
    while(条件){
        Object.wait();
    }
    //do something
}

//Thread B
synchronized(Object){
    条件=false;//改变条件
    Object.notify();
}

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;join-方法&#34;&gt;join() 方法&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private static void join() throws InterruptedException {
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;running&amp;quot;);
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }) ;
        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;running2&amp;quot;);
                try {
                    Thread.sleep(4000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }) ;

        t1.start();
        t2.start();

        //等待线程1终止
        t1.join();

        //等待线程2终止
        t2.join();

        LOGGER.info(&amp;quot;main over&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2018-03-16 20:21:30.967 [Thread-1] INFO  c.c.actual.ThreadCommunication - running2
2018-03-16 20:21:30.967 [Thread-0] INFO  c.c.actual.ThreadCommunication - running
2018-03-16 20:21:34.972 [main] INFO  c.c.actual.ThreadCommunication - main over

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在  &lt;code&gt;t1.join()&lt;/code&gt; 时会一直阻塞到 t1 执行完毕，所以最终主线程会等待 t1 和 t2 线程执行完毕。&lt;/p&gt;

&lt;p&gt;其实从源码可以看出，join() 也是利用的等待通知机制：&lt;/p&gt;

&lt;p&gt;核心逻辑:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    while (isAlive()) {
        wait(0);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在 join 线程完成后会调用 notifyAll() 方法，是在 JVM 实现中调用，所以这里看不出来。&lt;/p&gt;

&lt;h2 id=&#34;volatile-共享内存&#34;&gt;volatile 共享内存&lt;/h2&gt;

&lt;p&gt;因为 Java 是采用共享内存的方式进行线程通信的，所以可以采用以下方式用主线程关闭 A 线程:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class Volatile implements Runnable{

    private static volatile boolean flag = true ;

    @Override
    public void run() {
        while (flag){
            System.out.println(Thread.currentThread().getName() + &amp;quot;正在运行。。。&amp;quot;);
        }
        System.out.println(Thread.currentThread().getName() +&amp;quot;执行完毕&amp;quot;);
    }

    public static void main(String[] args) throws InterruptedException {
        Volatile aVolatile = new Volatile();
        new Thread(aVolatile,&amp;quot;thread A&amp;quot;).start();


        System.out.println(&amp;quot;main 线程正在运行&amp;quot;) ;

        TimeUnit.MILLISECONDS.sleep(100) ;

        aVolatile.stopThread();

    }

    private void stopThread(){
        flag = false ;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;thread A正在运行。。。
thread A正在运行。。。
thread A正在运行。。。
thread A正在运行。。。
thread A执行完毕
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这里的 flag 存放于主内存中，所以主线程和线程 A 都可以看到。&lt;/p&gt;

&lt;p&gt;flag 采用 volatile 修饰主要是为了内存可见性，更多内容可以查看&lt;a href=&#34;http://crossoverjie.top/2018/03/09/volatile/&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;countdownlatch-并发工具&#34;&gt;CountDownLatch 并发工具&lt;/h2&gt;

&lt;p&gt;CountDownLatch 可以实现 join 相同的功能，但是更加的灵活。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private static void countDownLatch() throws Exception{
        int thread = 3 ;
        long start = System.currentTimeMillis();
        final CountDownLatch countDown = new CountDownLatch(thread);
        for (int i= 0 ;i&amp;lt;thread ; i++){
            new Thread(new Runnable() {
                @Override
                public void run() {
                    LOGGER.info(&amp;quot;thread run&amp;quot;);
                    try {
                        Thread.sleep(2000);
                        countDown.countDown();

                        LOGGER.info(&amp;quot;thread end&amp;quot;);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }).start();
        }

        countDown.await();
        long stop = System.currentTimeMillis();
        LOGGER.info(&amp;quot;main over total time={}&amp;quot;,stop-start);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2018-03-16 20:19:44.126 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread run
2018-03-16 20:19:44.126 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread run
2018-03-16 20:19:44.126 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread run
2018-03-16 20:19:46.136 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread end
2018-03-16 20:19:46.136 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread end
2018-03-16 20:19:46.136 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread end
2018-03-16 20:19:46.136 [main] INFO  c.c.actual.ThreadCommunication - main over total time=2012
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CountDownLatch 也是基于 AQS(AbstractQueuedSynchronizer) 实现的，更多实现参考 &lt;a href=&#34;http://crossoverjie.top/2018/01/25/ReentrantLock/&#34;&gt;ReentrantLock 实现原理&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;初始化一个 CountDownLatch 时告诉并发的线程，然后在每个线程处理完毕之后调用 countDown() 方法。&lt;/li&gt;
&lt;li&gt;该方法会将 AQS 内置的一个 state 状态 -1 。&lt;/li&gt;
&lt;li&gt;最终在主线程调用 await() 方法，它会阻塞直到 &lt;code&gt;state == 0&lt;/code&gt; 的时候返回。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cyclicbarrier-并发工具&#34;&gt;CyclicBarrier 并发工具&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private static void cyclicBarrier() throws Exception {
        CyclicBarrier cyclicBarrier = new CyclicBarrier(3) ;

        new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;thread run&amp;quot;);
                try {
                    cyclicBarrier.await() ;
                } catch (Exception e) {
                    e.printStackTrace();
                }

                LOGGER.info(&amp;quot;thread end do something&amp;quot;);
            }
        }).start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;thread run&amp;quot;);
                try {
                    cyclicBarrier.await() ;
                } catch (Exception e) {
                    e.printStackTrace();
                }

                LOGGER.info(&amp;quot;thread end do something&amp;quot;);
            }
        }).start();

        new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;thread run&amp;quot;);
                try {
                    Thread.sleep(5000);
                    cyclicBarrier.await() ;
                } catch (Exception e) {
                    e.printStackTrace();
                }

                LOGGER.info(&amp;quot;thread end do something&amp;quot;);
            }
        }).start();

        LOGGER.info(&amp;quot;main thread&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;CyclicBarrier 中文名叫做屏障或者是栅栏，也可以用于线程间通信。&lt;/p&gt;

&lt;p&gt;它可以等待 N 个线程都达到某个状态后继续运行的效果。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;首先初始化线程参与者。&lt;/li&gt;
&lt;li&gt;调用 &lt;code&gt;await()&lt;/code&gt; 将会在所有参与者线程都调用之前等待。&lt;/li&gt;
&lt;li&gt;直到所有参与者都调用了 &lt;code&gt;await()&lt;/code&gt; 后，所有线程从 &lt;code&gt;await()&lt;/code&gt; 返回继续后续逻辑。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;运行结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2018-03-18 22:40:00.731 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread run
2018-03-18 22:40:00.731 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread run
2018-03-18 22:40:00.731 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread run
2018-03-18 22:40:00.731 [main] INFO  c.c.actual.ThreadCommunication - main thread
2018-03-18 22:40:05.741 [Thread-0] INFO  c.c.actual.ThreadCommunication - thread end do something
2018-03-18 22:40:05.741 [Thread-1] INFO  c.c.actual.ThreadCommunication - thread end do something
2018-03-18 22:40:05.741 [Thread-2] INFO  c.c.actual.ThreadCommunication - thread end do something
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以看出由于其中一个线程休眠了五秒，所有其余所有的线程都得等待这个线程调用 &lt;code&gt;await()&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;该工具可以实现 CountDownLatch 同样的功能，但是要更加灵活。甚至可以调用 &lt;code&gt;reset()&lt;/code&gt; 方法重置 CyclicBarrier (需要自行捕获 BrokenBarrierException 处理) 然后重新执行。&lt;/p&gt;

&lt;h2 id=&#34;线程响应中断&#34;&gt;线程响应中断&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class StopThread implements Runnable {
    @Override
    public void run() {

        while ( !Thread.currentThread().isInterrupted()) {
            // 线程执行具体逻辑
            System.out.println(Thread.currentThread().getName() + &amp;quot;运行中。。&amp;quot;);
        }

        System.out.println(Thread.currentThread().getName() + &amp;quot;退出。。&amp;quot;);

    }

    public static void main(String[] args) throws InterruptedException {
        Thread thread = new Thread(new StopThread(), &amp;quot;thread A&amp;quot;);
        thread.start();

        System.out.println(&amp;quot;main 线程正在运行&amp;quot;) ;

        TimeUnit.MILLISECONDS.sleep(10) ;
        thread.interrupt();
    }


}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;thread A运行中。。
thread A运行中。。
thread A退出。。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;可以采用中断线程的方式来通信，调用了 &lt;code&gt;thread.interrupt()&lt;/code&gt; 方法其实就是将 thread 中的一个标志属性置为了 true。&lt;/p&gt;

&lt;p&gt;并不是说调用了该方法就可以中断线程，如果不对这个标志进行响应其实是没有什么作用(这里对这个标志进行了判断)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;但是如果抛出了 InterruptedException 异常，该标志就会被 JVM 重置为 false。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;线程池-awaittermination-方法&#34;&gt;线程池 awaitTermination() 方法&lt;/h2&gt;

&lt;p&gt;如果是用线程池来管理线程，可以使用以下方式来让主线程等待线程池中所有任务执行完毕:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    private static void executorService() throws Exception{
        BlockingQueue&amp;lt;Runnable&amp;gt; queue = new LinkedBlockingQueue&amp;lt;&amp;gt;(10) ;
        ThreadPoolExecutor poolExecutor = new ThreadPoolExecutor(5,5,1, TimeUnit.MILLISECONDS,queue) ;
        poolExecutor.execute(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;running&amp;quot;);
                try {
                    Thread.sleep(3000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });
        poolExecutor.execute(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;running2&amp;quot;);
                try {
                    Thread.sleep(2000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        });

        poolExecutor.shutdown();
        while (!poolExecutor.awaitTermination(1,TimeUnit.SECONDS)){
            LOGGER.info(&amp;quot;线程还在执行。。。&amp;quot;);
        }
        LOGGER.info(&amp;quot;main over&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2018-03-16 20:18:01.273 [pool-1-thread-2] INFO  c.c.actual.ThreadCommunication - running2
2018-03-16 20:18:01.273 [pool-1-thread-1] INFO  c.c.actual.ThreadCommunication - running
2018-03-16 20:18:02.273 [main] INFO  c.c.actual.ThreadCommunication - 线程还在执行。。。
2018-03-16 20:18:03.278 [main] INFO  c.c.actual.ThreadCommunication - 线程还在执行。。。
2018-03-16 20:18:04.278 [main] INFO  c.c.actual.ThreadCommunication - main over
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用这个 &lt;code&gt;awaitTermination()&lt;/code&gt; 方法的前提需要关闭线程池，如调用了 &lt;code&gt;shutdown()&lt;/code&gt; 方法。&lt;/p&gt;

&lt;p&gt;调用了 &lt;code&gt;shutdown()&lt;/code&gt; 之后线程池会停止接受新任务，并且会平滑的关闭线程池中现有的任务。&lt;/p&gt;

&lt;h2 id=&#34;管道通信&#34;&gt;管道通信&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    public static void piped() throws IOException {
        //面向于字符 PipedInputStream 面向于字节
        PipedWriter writer = new PipedWriter();
        PipedReader reader = new PipedReader();

        //输入输出流建立连接
        writer.connect(reader);


        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;running&amp;quot;);
                try {
                    for (int i = 0; i &amp;lt; 10; i++) {

                        writer.write(i+&amp;quot;&amp;quot;);
                        Thread.sleep(10);
                    }
                } catch (Exception e) {

                } finally {
                    try {
                        writer.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }

            }
        });
        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
                LOGGER.info(&amp;quot;running2&amp;quot;);
                int msg = 0;
                try {
                    while ((msg = reader.read()) != -1) {
                        LOGGER.info(&amp;quot;msg={}&amp;quot;, (char) msg);
                    }

                } catch (Exception e) {

                }
            }
        });
        t1.start();
        t2.start();
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输出结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2018-03-16 19:56:43.014 [Thread-0] INFO  c.c.actual.ThreadCommunication - running
2018-03-16 19:56:43.014 [Thread-1] INFO  c.c.actual.ThreadCommunication - running2
2018-03-16 19:56:43.130 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=0
2018-03-16 19:56:43.132 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=1
2018-03-16 19:56:43.132 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=2
2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=3
2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=4
2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=5
2018-03-16 19:56:43.133 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=6
2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=7
2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=8
2018-03-16 19:56:43.134 [Thread-1] INFO  c.c.actual.ThreadCommunication - msg=9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Java 虽说是基于内存通信的，但也可以使用管道通信。&lt;/p&gt;

&lt;p&gt;需要注意的是，输入流和输出流需要首先建立连接。这样线程 B 就可以收到线程 A 发出的消息了。&lt;/p&gt;

&lt;p&gt;实际开发中可以灵活根据需求选择最适合的线程通信方式。&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>